name: CI
on: pull_request # trigger
jobs: # ci actions
  ci-job:
    runs-on: ubuntu-latest # github runner os (linux, windows, macos)
    steps:
      - name: Checkout
        uses: actions/checkout@v3

      - name: Install Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18

      # pnpm install & cache
      # https://github.com/marketplace/actions/setup-pnpm#use-cache-to-reduce-installation-time
      - uses: pnpm/action-setup@v2
        name: Install pnpm
        with:
          version: 8
          run_install: false

      - name: Get pnpm store directory
        shell: bash
        run: |
          echo "STORE_PATH=$(pnpm store path --silent)" >> $GITHUB_ENV

      - uses: actions/cache@v3
        name: Setup pnpm cache
        with:
          path: ${{ env.STORE_PATH }}
          key: ${{ runner.os }}-pnpm-store-${{ hashFiles('**/pnpm-lock.yaml') }}
          restore-keys: |
            ${{ runner.os }}-pnpm-store-

      - name: Install dependencies
        run: pnpm install --frozen-lockfile

      - name: Build Project
        run: pnpm run build

      # https://nextjs.org/docs/pages/building-your-application/deploying/ci-build-caching
      - name: Setup build cache
        uses: actions/cache@v3
        with:
          # See here for caching with `yarn` https://github.com/actions/cache/blob/main/examples.md#node---yarn or you can leverage caching with actions/setup-node https://github.com/actions/setup-node
          path: |
            ~/.npm
            ${{ github.workspace }}/.next/cache
          # Generate a new cache whenever packages or source files change.
          key: ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-${{ hashFiles('**/*.js', '**/*.jsx', '**/*.ts', '**/*.tsx') }}
          # If source files changed but packages didn't, rebuild from a prior cache.
          restore-keys: |
            ${{ runner.os }}-nextjs-${{ hashFiles('**/pnpm-lock.yaml') }}-

      - name: Test Project
        run: pnpm run test

  # add comment(issues)
  add-comment:
    runs-on: ubuntu-latest
    needs: ci-job # running after ci-job done
    if: always()
    permissions:
      issues: write
      pull-requests: write
    env:
      CI_JOB_RESULT: ${{needs.ci-job.result}}
    steps:
      # success
      - name: Comment to PR(Success)
        if: ${{env.CI_JOB_RESULT == 'success'}}
        uses: actions/github-script@v6
        id: success-script
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Ci passed"
            })

      # failure
      - name: Comment to PR(Failure)
        if: ${{env.CI_JOB_RESULT == 'failure'}}
        uses: actions/github-script@v6
        id: failure-script
        with:
          script: |
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: "Ci failure"
            })
